import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;

public class AccessView {
    private JFrame frame;

    private Client clientInstance;

    private JPanel mainPanel;

    private JLabel nameLabel;
    private JLabel passLabel;
    private JLabel errorLabel;

    private JTextField nameField;
    private JPasswordField passField;

    private JButton signInButton;
    private JButton signUpButton;

    //settings the client reference
    public void setInstance(Client user) {
        this.clientInstance = user;
    }

    public AccessView() {
        frame = new JFrame();
        frame.setSize(375, 250);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setTitle("WORD QUIZZLE");
        frame.add(mainPanel);

        signUpButton.addActionListener(new SignUpAction());
        signInButton.addActionListener(new SignInAction());

        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBackground(new Color(-16449431));
        mainPanel.setFocusCycleRoot(true);
        mainPanel.setForeground(new Color(-657931));
        mainPanel.setName("WORLD QUIZZLE");
        mainPanel.setPreferredSize(new Dimension(375, 250));
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$("OpenDyslexicMono", Font.BOLD, 24, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setForeground(new Color(-657931));
        nameLabel.setText("Username");
        mainPanel.add(nameLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHEAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 50), null, 0, false));
        nameField = new JTextField();
        nameField.setBackground(new Color(-13815758));
        nameField.setCaretColor(new Color(-16777216));
        Font nameFieldFont = this.$$$getFont$$$("OpenDyslexicMono", Font.PLAIN, 16, nameField.getFont());
        if (nameFieldFont != null) nameField.setFont(nameFieldFont);
        nameField.setForeground(new Color(-657931));
        nameField.setMargin(new Insets(2, 6, 2, 6));
        mainPanel.add(nameField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, 40), null, 0, false));
        passLabel = new JLabel();
        Font passLabelFont = this.$$$getFont$$$("OpenDyslexicMono", Font.BOLD, 24, passLabel.getFont());
        if (passLabelFont != null) passLabel.setFont(passLabelFont);
        passLabel.setForeground(new Color(-657931));
        passLabel.setText("Password");
        mainPanel.add(passLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 50), null, 0, false));
        passField = new JPasswordField();
        passField.setBackground(new Color(-13815758));
        passField.setCaretColor(new Color(-16777216));
        Font passFieldFont = this.$$$getFont$$$("OpenDyslexicMono", Font.PLAIN, 16, passField.getFont());
        if (passFieldFont != null) passField.setFont(passFieldFont);
        passField.setForeground(new Color(-657931));
        passField.setMargin(new Insets(2, 10, 2, 5));
        mainPanel.add(passField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, 40), null, 0, false));
        signUpButton = new JButton();
        signUpButton.setBackground(new Color(-16748541));
        signUpButton.setFocusPainted(false);
        Font signUpButtonFont = this.$$$getFont$$$("Michroma", Font.BOLD, 12, signUpButton.getFont());
        if (signUpButtonFont != null) signUpButton.setFont(signUpButtonFont);
        signUpButton.setForeground(new Color(-16777216));
        signUpButton.setRolloverEnabled(false);
        signUpButton.setText("Sign Up");
        mainPanel.add(signUpButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 40), null, 0, false));
        signInButton = new JButton();
        signInButton.setBackground(new Color(-10855073));
        signInButton.setBorderPainted(true);
        signInButton.setDefaultCapable(true);
        signInButton.setDoubleBuffered(false);
        signInButton.setFocusCycleRoot(false);
        signInButton.setFocusPainted(false);
        Font signInButtonFont = this.$$$getFont$$$("Michroma", Font.BOLD, 12, signInButton.getFont());
        if (signInButtonFont != null) signInButton.setFont(signInButtonFont);
        signInButton.setForeground(new Color(-16777216));
        signInButton.setHideActionText(false);
        signInButton.setMargin(new Insets(0, 0, 0, 0));
        signInButton.setRequestFocusEnabled(false);
        signInButton.setText("Sign In");
        mainPanel.add(signInButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 40), null, 0, false));
        errorLabel = new JLabel();
        Font errorLabelFont = this.$$$getFont$$$("Inter Extra Bold", Font.BOLD, 14, errorLabel.getFont());
        if (errorLabelFont != null) errorLabel.setFont(errorLabelFont);
        errorLabel.setForeground(new Color(-2682368));
        errorLabel.setText("");
        mainPanel.add(errorLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(160, 40), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public class SignUpAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (nameField.getText().isEmpty() || passField.getPassword().length == 0) {
                errorLabel.setText("");
                errorLabel.setText("Fill all the fields");
            } else {
                try {
                    String tmp = new String(passField.getPassword());
                    ReturnCodes.Codex result = Client.userReg.userRegistration(nameField.getText(), tmp);
                    errorLabel.setText("");
                    errorLabel.setText(ReturnCodes.toMessage(result));
                } catch (RemoteException | NullPointerException err) {
                    err.printStackTrace();
                }
            }
        }
    }

    public class SignInAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (nameField.getText().isEmpty() || passField.getPassword().length == 0) {
                errorLabel.setText("");
                errorLabel.setText("Fill all the fields");
            } else {
                String tmp = new String(passField.getPassword());
                ReturnCodes.Codex result = clientInstance.login(nameField.getText(), tmp);
                if (result.equals(ReturnCodes.Codex.SUCCESS)) {
                    clientInstance.gotoMainView();
                    frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                } else {
                    errorLabel.setText("");
                    errorLabel.setText(ReturnCodes.toMessage(result));
                }
            }
        }
    }

}
